class Solution:
    def maximumWealth(self, accounts):
        # Initialize the maximum wealth seen so far to 0 (the minimum wealth possible)
        max_wealth_so_far = 0

        # Iterate over accounts
        for account in accounts:
            # Add the money in each bank
            curr_customer_wealth = sum(account)
            # Update the maximum wealth seen so far if the current wealth is greater
            # If it is less than the current sum
            max_wealth_so_far = max(max_wealth_so_far, curr_customer_wealth)

        # Return the maximum wealth
        return max_wealth_so_far
if __name__ =="__main__":
    acc=[[1,2],[1,3,4],[1,1,2,3]]
    print(Solution().maximumWealth(acc))
    
    #Time complexity: O(M \cdot N)O(M⋅N)

#For each of the MM customers, we need to iterate over all NN banks to find the sum of his/her wealth. Inside each iteration, operations like addition or finding maximum take O(1)O(1) time. Hence, the total time complexity is O(M \cdot N)O(M⋅N).

#Space complexity: O(1)O(1)

#We only need two variables currCustomerWealth and maxWealthSoFar to store the wealth of the current customer, and the highest wealth we have seen so far respectively. Therefore, the space complexity is constant.
#input arrays example [1,2],[1,2,3],[1,2,3,4]
#output would be 10
